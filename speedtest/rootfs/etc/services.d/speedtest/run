#!/usr/bin/with-contenv bashio

set -e

export ACCEPT_EULA=$(bashio::config 'accept_eula')
export ACCEPT_RGPD=$(bashio::config 'accept_rgpd')

if [[ $(bashio::config 'print_closest_servers') == "true" ]]; then
    /usr/local/bin/speedtest -L --accept-license --accept-gdpr
    exit 0
fi

if [[ "$ACCEPT_EULA" != "true" || "$ACCEPT_RGPD" != "true" ]]; then
    bashio::log.fatal "Licenses were not accepted!"
    exit 1
fi

if [[ $(bashio::config 'debug') == "true" ]]; then
    bashio::log.level "debug"
fi

function post_result() {
    local sensor=${1}
    local unitmeasure=${2}
    local friendlyname=${3}
    local state=${4}

    local data="{\"state\":$state, \"attributes\":{\"state_class\":\"measurement\",\"unit_of_measurement\":\"$unitmeasure\",\"friendly_name\":\"$friendlyname\",\"icon\":\"mdi:speedometer\"}}"
    
    bashio::api.supervisor POST "/core/api/states/sensor.speedtest_$sensor" "$data"

    bashio::log.info "$friendlyname updated"
}

function log_result() {
    local $server_tag=""
    if bashio::var.has_value ${1}); then
        $server_tag="_${server}"
    fi
    post_result "download${server_tag}" "Mbit/s" "Speedtest Download" $down_load_speed
    post_result "upload${server_tag}" "Mbit/s" "Speedtest Upload" $up_load_speed
    post_result "ping${server_tag}" "ms" "Speedtest Ping" $ping_latency
}

function test_server() {
    local server=${1}
    if bashio::var.has_value(server) {
        bashio::log.info "--------- Starting speed test for ${server} ---------"
        export RESULT=$(/usr/local/bin/speedtest --format=json --precision=4 --accept-license --accept-gdpr -s "$server")
    else
        bashio::log.info "--------- Starting speed test (auto server) ---------"
        export RESULT=$(/usr/local/bin/speedtest --format=json --precision=4 --accept-license --accept-gdpr)
    fi
    bashio::log.debug "Speedtest output: ${RESULT}"

    export down_load_speed=$(printf %.2f "$(($(echo $RESULT | jq .download.bandwidth)*8/10000))e-2")
    export up_load_speed=$(printf %.2f "$(($(echo $RESULT | jq .upload.bandwidth)*8/10000))e-2")
    export ping_latency=$(echo $RESULT | jq .ping.latency)

    bashio::log.info "--------- Speed Result ---------"
    bashio::log.info "Download measured: $down_load_speed"
    bashio::log.info "Upload: $up_load_speed"
    bashio::log.info "Ping: $ping_latency"
    bashio::log.info "--------- Speedtest Ended ---------"
    log_result ${server}
}



if bashio::config.exists 'server_id'; then
    test_server $(bashio::config 'server_id')
elif bashio::config.exists 'servers'; then
    servers=$(bashio::config 'servers')
    bashio::log.info "Speedtest starting multi server tests"
    for server = ${servers[@]}; do
        test_server ${server}
    done
    bashio::log.info "Multi server tests complete"
else
    test_server
fi
